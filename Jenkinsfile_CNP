#!groovy

@Library("Infrastructure")
import uk.gov.hmcts.contino.AppPipelineConfig

def type = "java"
def product = "civil-damages"
def component = "ccd-definition"
AppPipelineConfig pipelineConf

static Map<String, Object> secret(String secretName, String envVariable) {
  [$class     : 'AzureKeyVaultSecret',
   secretType : 'Secret',
   name       : secretName,
   envVariable: envVariable
  ]
}

def secrets = [
  's2s-${env}': [
    secret('microservicekey-ccd-gw', 'CCD_API_GATEWAY_S2S_SECRET'),
    secret('microservicekey-ccd-data', 'CCD_DATA_STORE_S2S_SECRET'),
    secret('microservicekey-ccd-definition', 'CCD_DEFINITION_STORE_S2S_SECRET')
  ],
  'ccd-${env}': [
    secret('ccd-api-gateway-oauth2-client-secret', 'CCD_API_GATEWAY_IDAM_CLIENT_SECRET'),
    secret('postcode-info-address-lookup-token', 'ADDRESS_LOOKUP_TOKEN')
  ],
  'unspec-${env}': [
    secret('microservicekey-unspec-service', 'S2S_SECRET'),
    secret('ccd-importer-username', 'CCD_CONFIGURER_IMPORTER_USERNAME'),
    secret('ccd-importer-password', 'CCD_CONFIGURER_IMPORTER_PASSWORD')
  ]
]

def archiveCoreCaseDataDefinitions(env) {
  dir("${WORKSPACE}/bin") {
    sh "./build-release-ccd-definition.sh ${env}"
  }

  dir("${WORKSPACE}/build") {
    steps.archiveArtifacts artifacts: "ccd-release-config/civil-damages-ccd-definition-${env}.xlsx"
  }
}

def createGithubRelease() {
  dir("${WORKSPACE}/bin") {
    sh "./create-github-release.sh"
  }
}

withPipeline(type, product, component) {
  pipelineConf = config
  disableLegacyDeployment()
  enableAksStagingDeployment()
//  enableSlackNotifications('#unspec_notification')

  onPR {
    loadVaultSecrets(secrets)
  }
  onMaster {
    loadVaultSecrets(secrets)
  }
  onDemo {
    loadVaultSecrets(secrets)
  }

  before('smoketest:preview') {
    env.URL="https://xui-civil-damages-ccd-definition-pr-${CHANGE_ID}.service.core-compute-preview.internal"
  }

  before('smoketest:aat') {
    env.URL = "https://manage-case.aat.platform.hmcts.net"
  }

  after('functionalTest:aat') {
    archiveCoreCaseDataDefinitions('aat')
//    createGithubRelease()
  }
}
